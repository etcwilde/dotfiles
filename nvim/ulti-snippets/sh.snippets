# vim:set noet sw=4 ts=4 sts=4 tw=72:

global !p
import vim

def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

#
# Initialization
#

snippet #! "Shebang!" b
#!/usr/bin/env `!p snip.rv=getShell()`$0
endsnippet

snippet safe "set -eou pipefail"
set -eou pipefail
endsnippet

snippet tempfile "Create a tempfile" b
${1:tmpfile}="$(mktemp -t ${3:--suffix=${4:.suffix}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z0-9]', '_', snip.fn) or 'untitled'`}.XXXXXX)"
`!p
snip.rv = 'trap "rm -f \'$' + t[1] + '\'" EXIT\n'
snip.rv += 'trap "rm -f \'$' + t[1] + '\'; exit 1" INT HUP TERM'`
$0
endsnippet

#
# Control flow
#

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet
