# vim:set noet sw=4 ts=4 sts=4 tw=80:
# Swift snippets

# Comments
global !p
def comment_bar(tw):
	return "//===" + '-' * (tw - 10) + "===//"

# Common variables
tw = int(snip.opt("&tw", 72))
ts = int(snip.opt("&ts", 4))
sw = int(snip.opt("&sw", 4))
sts = int(snip.opt("&sts", 4))
endglobal

snippet cbar "Create a comment bar" b
`!p
if not snip.c:
	snip.rv += comment_bar(tw)
`
endsnippet

snippet clbar "Bar with left-aligned comment" b
//===--- ${1} `!p
indent = len(snip._initial_indent)
snip.rv += '-' * (tw - (8 + len(t[1]) + 7 + indent)) + "===//\n"`
$0
endsnippet

snippet crbar "Bar with right-aligned comment" b
`!p
indent = len(snip._initial_indent)
snip.rv += "//===" + '-' * (tw - (8 + len(t[1]) + 7 + indent))
` ${1} ---===//
$0
endsnippet

# Access Control
snippet pub "public access control" b
public $0
endsnippet

snippet priv "private access control" b
private $0
endsnippet

# Control Flow
snippet if "if statement" b
if $1 {
	$2
}$0
endsnippet

snippet ifl "if let" b
if let $1 = ${2:$1} {
	$3
}$0
endsnippet

snippet ifcl "if case let" b
if case let $1 = $2 {
	$3
}$0
endsnippet

snippet "(\}[ \t]*)?elif" "else if" r
`!p snip.rv = match.group(1) `else if $1 {
	$2
}$0
endsnippet

snippet "(\}[ \t]*)?else" "else" r
`!p snip.rv = match.group(1) `else {
	$1
}$0
endsnippet

snippet guard "guard" b
guard $1 else {
	$2
}$0
endsnippet

snippet guardl "guard let" b
guard let $1 = ${2:$1} else {
	$3
}$0
endsnippet

snippet guardcl "guard case let" b
guard case let $2 = $2 else {
	$3
}$0
endsnippet

snippet for "for loop" b
for $1 in ${2:$1s} {
	$3
}$0
endsnippet

snippet while "while loop" b
while $1 {
	$2
}$0
endsnippet

snippet repeat "reapeat-while" b
repeat {
	$2
} while $1
endsnippet

snippet switch "switch-case" b
switch $1 {
	$2
}$0
endsnippet

snippet case "case" b
case $1:
	$0
endsnippet

# Declarations

snippet actor "Actor declaration"
actor $1 {
	$2
}$0
endsnippet

snippet class "Class declaration"
class $1 {
	$2
}$0
endsnippet

snippet enum "Enum declaration"
enum $1 {
	$2
}$0
endsnippet

snippet extension "Extension declaration"
extension $1 {
	$2
}$0
endsnippet

snippet struct "Struct declaration"
struct $1 {
	$2
}$0
endsnippet

snippet protocol "Protocol declaration"
protocol $1 {
	$2
}$0
endsnippet

snippet func  "Synchronous function declaration"
func $1($2) ${3} {
	${4}
}
${0}
endsnippet

snippet funca "Asynchronous function declaration"
func $1($2) async ${3} {
	${4}
}
${0}
endsnippet

snippet funct "Throwing function declaration"
func $1($2) throws ${3} {
	${4}
}
${0}
endsnippet

snippet let "let constant declaration"
let $1 = $2
endsnippet

snippet var "var variable declaratoin"
var ${1} = ${2}
endsnippet

# Patterns

snippet ptrto "withUnsafePointerTo" w
withUnsafePointerTo(to: $1) {
	$2
}$0
endsnippet

snippet tg "withTaskGroup" w
await withTaskGroup(of: $1, returning: $2) {
	$3
}$0
endsnippet

snippet ttg "withThrowingTaskGroup" w
try await withThrowingTaskGroup(of: $1, returning: $2) {
	$3
}$0
endsnippet

snippet cont "withCheckedContinuation" w
await withCheckedContinuation { cont in
	$1
}$0
endsnippet

snippet contt "withCheckedThrowingContinuation" w
try await withCheckedThrowingContinuation { cont in
	$1
}$0
endsnippet

# extras

snippet main "Explict Main entrypoint" b
@main
public struct ${1:App} {
	public static func main() {
		${2}
	}
}
$0
endsnippet

snippet maina "Asynchronous main entrypoint" b
@main
public struct ${1:App} {
	public static func main() async {
		${2}
	}
}
$0
endsnippet
